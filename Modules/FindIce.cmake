# FindIce.cmake -- based on a module written by Markus Rickert for the JAST project.

# Doesn't seem to work properly with CMake 2.6
cmake_minimum_required(VERSION 2.8.5)
# does not work with 2.8.3--2.8.4 
# http://www.cmake.org/Bug/bug_relationship_graph.php?bug_id=11973&graph=relation

# Workaround for missing library links on DICE
SET(CMAKE_FIND_LIBRARY_SUFFIXES .so.34 ${CMAKE_FIND_LIBRARY_SUFFIXES})

# Hack for finding the right files for various Windows compilers
# See http://doc.zeroc.com/display/Ice/Using+the+Windows+Binary+Distribution
IF (CMAKE_GENERATOR MATCHES "Visual Studio 10 Win64")
    SET (SUBDIR "/vc100/x64")
ELSEIF (CMAKE_GENERATOR MATCHES "Visual Studio 10")
    SET (SUBDIR "/vc100")
ELSEIF (CMAKE_GENERATOR MATCHES "Visual 9 2008 Win64")
    SET (SUBDIR "/x64")
ELSEIF (ICE_SUBDIR)
    # (e.g., if you're using NMake makefiles and you still need 64-bitness)
    SET (SUBDIR ${ICE_SUBDIR})
ENDIF ()

FILE(
	GLOB
	ICE_BIN_DIRS
	$ENV{ICE_HOME}/bin${SUBDIR}
	$ENV{HOME}/bin${SUBDIR}
	/opt/Ice-*/bin${SUBDIR}
	/usr/local/bin${SUBDIR}
	/usr/bin${SUBDIR}
	$ENV{SystemDrive}/Ice-*/bin${SUBDIR}
	$ENV{ProgramFiles}/ZeroC/Ice-*/bin${SUBDIR}
	$ENV{ProgramFilesW6432}/ZeroC/Ice-*/bin${SUBDIR}
)
FILE(
	GLOB
	ICE_INCLUDE_DIRS
	$ENV{ICE_HOME}/include
	$ENV{HOME}/include
	/opt/Ice-*/include
	/usr/local/include
	/usr/include
	$ENV{SystemDrive}/Ice-*/include
	$ENV{ProgramFiles}/ZeroC/Ice-*/include
	$ENV{ProgramFilesW6432}/ZeroC/Ice-*/include
)
FILE(
	GLOB
	ICE_LIBRARY_DIRS
	$ENV{ICE_HOME}/lib${SUBDIR}
	$ENV{HOME}/lib${SUBDIR}
	/opt/Ice-*/lib${SUBDIR}
	/usr/local/lib${SUBDIR}
	/usr/lib${SUBDIR}
	$ENV{SystemDrive}/Ice-*/lib${SUBDIR}
	$ENV{ProgramFiles}/ZeroC/Ice-*/lib${SUBDIR}
	$ENV{ProgramFilesW6432}/ZeroC/Ice-*/lib${SUBDIR}
)
FILE(
	GLOB
	ICE_SLICE_DIRS
	$ENV{ICE_HOME}/slice
	$ENV{HOME}/share/slice
	/opt/Ice-*/slice
	/usr/local/share/slice
	/usr/share/slice
	/usr/share/Ice-*/slice
	$ENV{SystemDrive}/Ice-*/slice
	$ENV{ProgramFiles}/ZeroC/Ice-*/slice
	$ENV{ProgramFilesW6432}/ZeroC/Ice-*/slice
)

FIND_PATH(
	ICE_INCLUDE_DIR
	Ice/Application.h
	${ICE_INCLUDE_DIRS}
)

FIND_PATH(
	ICE_SLICE_DIR
	Ice/BuiltinSequences.ice
	${ICE_SLICE_DIRS}
)

MACRO(ICE_ADJUST_LIB_VARS basename)
	IF (ICE_${basename}_LIBRARY_DEBUG AND NOT ICE_${basename}_LIBRARY_RELEASE)
		SET(ICE_${basename}_LIBRARY ${ICE_${basename}_LIBRARY_DEBUG})
	ENDIF (ICE_${basename}_LIBRARY_DEBUG AND NOT ICE_${basename}_LIBRARY_RELEASE)
	
	IF (ICE_${basename}_LIBRARY_RELEASE AND NOT ICE_${basename}_LIBRARY_DEBUG)
		SET(ICE_${basename}_LIBRARY ${ICE_${basename}_LIBRARY_RELEASE})
	ENDIF (ICE_${basename}_LIBRARY_RELEASE AND NOT ICE_${basename}_LIBRARY_DEBUG)
	
	IF (ICE_${basename}_LIBRARY_DEBUG AND ICE_${basename}_LIBRARY_RELEASE)
		SET(ICE_${basename}_LIBRARY debug ${ICE_${basename}_LIBRARY_DEBUG} optimized ${ICE_${basename}_LIBRARY_RELEASE})
	ENDIF (ICE_${basename}_LIBRARY_DEBUG AND ICE_${basename}_LIBRARY_RELEASE)
	
	IF (ICE_${basename}_LIBRARY)
		SET(ICE_${basename}_FOUND TRUE)
	ENDIF (ICE_${basename}_LIBRARY)
ENDMACRO(ICE_ADJUST_LIB_VARS)

FIND_LIBRARY(ICE_FREEZE_LIBRARY_DEBUG NAMES Freezed PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_FREEZE_LIBRARY_RELEASE NAMES Freeze PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(FREEZE)

FIND_LIBRARY(ICE_GLACIER2_LIBRARY_DEBUG NAMES Glacier2d PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_GLACIER2_LIBRARY_RELEASE NAMES Glacier2 PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(GLACIER2)

FIND_LIBRARY(ICE_ICE_LIBRARY_DEBUG NAMES Iced PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_ICE_LIBRARY_RELEASE NAMES Ice PATHS ${ICE_LIBRARY_DIRS} NO_DEFAULT_PATH)
ICE_ADJUST_LIB_VARS(ICE)

FIND_LIBRARY(ICE_ICEBOX_LIBRARY_DEBUG NAMES IceBoxd PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_ICEBOX_LIBRARY_RELEASE NAMES IceBox PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(ICEBOX)

FIND_LIBRARY(ICE_ICEGRID_LIBRARY_DEBUG NAMES IceGridd PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_ICEGRID_LIBRARY_RELEASE NAMES IceGrid PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(ICEGRID)

FIND_LIBRARY(ICE_ICEPATCH2_LIBRARY_DEBUG NAMES IcePatch2d PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_ICEPATCH2_LIBRARY_RELEASE NAMES IcePatch2 PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(ICEPATCH2)

FIND_LIBRARY(ICE_ICESSL_LIBRARY_DEBUG NAMES IceSSLd PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_ICESSL_LIBRARY_RELEASE NAMES IceSSL PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(ICESSL)

FIND_LIBRARY(ICE_ICESTORM_LIBRARY_DEBUG NAMES IceStormd PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_ICESTORM_LIBRARY_RELEASE NAMES IceStorm PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(ICESTORM)

FIND_LIBRARY(ICE_ICESTORMSERVICE_LIBRARY_DEBUG NAMES IceStormServiced PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_ICESTORMSERVICE_LIBRARY_RELEASE NAMES IceStormService PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(ICESTORMSERVICE)

FIND_LIBRARY(ICE_ICEUTIL_LIBRARY_DEBUG NAMES IceUtild PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_ICEUTIL_LIBRARY_RELEASE NAMES IceUtil PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(ICEUTIL)

FIND_LIBRARY(ICE_ICEXML_LIBRARY_DEBUG NAMES IceXMLd PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_ICEXML_LIBRARY_RELEASE NAMES IceXML PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(ICEXML)

FIND_LIBRARY(ICE_SLICE_LIBRARY_DEBUG NAMES Sliced PATHS ${ICE_LIBRARY_DIRS})
FIND_LIBRARY(ICE_SLICE_LIBRARY_RELEASE NAMES Slice PATHS ${ICE_LIBRARY_DIRS})
ICE_ADJUST_LIB_VARS(SLICE)

FIND_PROGRAM(ICE_SLICE2CPP slice2cpp ${ICE_BIN_DIRS})

IF (ICE_SLICE2CPP)
	SET(ICE_SLICE2CPP_FOUND TRUE)
ENDIF (ICE_SLICE2CPP)

IF(NOT (CMAKE_SYSTEM MATCHES Windows))
    SET (PTHREAD_IF_NECESSARY pthread)
ENDIF()

IF (
	ICE_INCLUDE_DIR AND
	ICE_FREEZE_FOUND AND
	ICE_GLACIER2_FOUND AND
	ICE_ICE_FOUND AND
	ICE_ICEBOX_FOUND AND
	ICE_ICEGRID_FOUND AND
	ICE_ICEPATCH2_FOUND AND
	ICE_ICESSL_FOUND AND
	ICE_ICESTORM_FOUND AND
	ICE_ICESTORMSERVICE_FOUND AND
	ICE_ICEUTIL_FOUND AND
	ICE_ICEXML_FOUND AND
	ICE_SLICE_DIR AND
	ICE_SLICE_FOUND AND
	ICE_SLICE2CPP_FOUND
)
	SET(ICE_FOUND TRUE)
	
	SET(
		ICE_LIBRARIES
		${ICE_FREEZE_LIBRARY}
		${ICE_GLACIER2_LIBRARY}
		${ICE_ICE_LIBRARY}
		${ICE_ICEBOX_LIBRARY}
		${ICE_ICEGRID_LIBRARY}
		${ICE_ICEPATCH2_LIBRARY}
		${ICE_ICESSL_LIBRARY}
		${ICE_ICESTORM_LIBRARY}
		${ICE_ICESTORMSERVICE}
		${ICE_ICEUTIL_LIBRARY}
		${ICE_ICEXML_LIBRARY}
		${ICE_SLICE_LIBRARY}
		${PTHREAD_IF_NECESSARY}
	)
ENDIF (
	ICE_INCLUDE_DIR AND
	ICE_FREEZE_FOUND AND
	ICE_GLACIER2_FOUND AND
	ICE_ICE_FOUND AND
	ICE_ICEBOX_FOUND AND
	ICE_ICEGRID_FOUND AND
	ICE_ICEPATCH2_FOUND AND
	ICE_ICESSL_FOUND AND
	ICE_ICESTORM_FOUND AND
	ICE_ICESTORMSERVICE_FOUND AND
	ICE_ICEUTIL_FOUND AND
	ICE_ICEXML_FOUND AND
	ICE_SLICE_DIR AND
	ICE_SLICE_FOUND AND
	ICE_SLICE2CPP_FOUND
)

MACRO(ICE_WRAP_CPP_2 outfiles)
    SET(SLICE_INCLUDES -I${ICE_SLICE_DIR})
    FILE(TO_CMAKE_PATH "${ARGN}" argn_cmake)
	FOREACH(i ${argn_cmake})
	    IF(IS_DIRECTORY ${i})
    	    # If the argument is a directory, it's the directory where the next set of files exist
    	    # -- also add it to the persistent include path
	        SET(base ${i})
	        SET(SLICE_INCLUDES -I${base} ${SLICE_INCLUDES})
	    ELSE()
	        # Otherwise, it's a file to process
    		GET_FILENAME_COMPONENT(name ${i} NAME)
    		GET_FILENAME_COMPONENT(name_we ${i} NAME_WE)
    		GET_FILENAME_COMPONENT(relative ${i} PATH)
    		SET(infile ${base}/${relative}/${name})
    		SET(outfile1 ${CMAKE_CURRENT_BINARY_DIR}/${relative}/${name_we}.cpp)
    		SET(outfile2 ${CMAKE_CURRENT_BINARY_DIR}/${relative}/${name_we}.h)
    		FILE(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${relative})
    		ADD_CUSTOM_COMMAND(
    			OUTPUT ${outfile1} ${outfile2}
    			COMMAND ${ICE_SLICE2CPP}
    			ARGS ${SLICE_INCLUDES} -I${base}/${relative} --output-dir ${CMAKE_CURRENT_BINARY_DIR}/${relative} ${infile}
    			MAIN_DEPENDENCY ${infile}
    		)
		Message("Running: ${ICE_SLICE2CPP} ${SLICE_INCLUDES} -I${base}/${relative} --output-dir ${CMAKE_CURRENT_BINARY_DIR}/${relative} ${infile}")
    		SET(${outfiles} ${${outfiles}} ${outfile1} ${outfile2})
    		INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
    		INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR}/${relative})
		ENDIF()
	ENDFOREACH(i)
ENDMACRO(ICE_WRAP_CPP_2)

MARK_AS_ADVANCED(
	ICE_FOUND
	ICE_FREEZE_FOUND
	ICE_FREEZE_LIBRARY
	ICE_FREEZE_LIBRARY_DEBUG
	ICE_FREEZE_LIBRARY_RELEASE
	ICE_GLACIER2_FOUND
	ICE_GLACIER2_LIBRARY
	ICE_GLACIER2_LIBRARY_DEBUG
	ICE_GLACIER2_LIBRARY_RELEASE
	ICE_ICE_FOUND
	ICE_ICE_LIBRARY
	ICE_ICE_LIBRARY_DEBUG
	ICE_ICE_LIBRARY_RELEASE
	ICE_ICEBOX_FOUND
	ICE_ICEBOX_LIBRARY
	ICE_ICEBOX_LIBRARY_DEBUG
	ICE_ICEBOX_LIBRARY_RELEASE
	ICE_ICEGRID_FOUND
	ICE_ICEGRID_LIBRARY
	ICE_ICEGRID_LIBRARY_DEBUG
	ICE_ICEGRID_LIBRARY_RELEASE
	ICE_ICEPATCH2_FOUND
	ICE_ICEPATCH2_LIBRARY
	ICE_ICEPATCH2_LIBRARY_DEBUG
	ICE_ICEPATCH2_LIBRARY_RELEASE
	ICE_ICESSL_FOUND
	ICE_ICESSL_LIBRARY
	ICE_ICESSL_LIBRARY_DEBUG
	ICE_ICESSL_LIBRARY_RELEASE
	ICE_ICESTORM_FOUND
	ICE_ICESTORM_LIBRARY
	ICE_ICESTORM_LIBRARY_DEBUG
	ICE_ICESTORM_LIBRARY_RELEASE
	ICE_ICESTORMSERVICE_FOUND
	ICE_ICESTORMSERVICE_LIBRARY
	ICE_ICESTORMSERVICE_LIBRARY_DEBUG
	ICE_ICESTORMSERVICE_LIBRARY_RELEASE
	ICE_ICEUTIL_FOUND
	ICE_ICEUTIL_LIBRARY
	ICE_ICEUTIL_LIBRARY_DEBUG
	ICE_ICEUTIL_LIBRARY_RELEASE
	ICE_ICEXML_FOUND
	ICE_ICEXML_LIBRARY
	ICE_ICEXML_LIBRARY_DEBUG
	ICE_ICEXML_LIBRARY_RELEASE
	ICE_INCLUDE_DIR
	ICE_LIBRARIES
	ICE_SLICE_DIR
	ICE_SLICE_FOUND
	ICE_SLICE_LIBRARY
	ICE_SLICE_LIBRARY_DEBUG
	ICE_SLICE_LIBRARY_RELEASE
	ICE_SLICE2CPP
	ICE_WRAP_CPP
	ICE_WRAP_CPP_2
) 
